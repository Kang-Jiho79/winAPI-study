Vector

Vector의 특징
	메모리가 1.5배 할당됨(자동으로)
	STL 컨테이너
	메모리가 재할당
	Iterator기반 랜덤 접근 (array는 index 기반 랜덤처리)
	느림 (포인터를 통한 접근)

Vector 사용 케이스
	저장할 데이터 개수가 가변적인 경우(크기가 동적으로 변한다)
	'검색'을 빈번하게 하지 않은 경우
	중간에 데이터 삽입이나 삭제가 일어나지 않는 경우

vector<int> v = { 2, 41 };

맨뒤에 10을 추가하는 명령
v. push_back(10);		복사생성자 - 성능저하 (오버헤드 문제) - 이미 생성된 객체를 백터에 추가하는 함수 / 객체를 삽입하기 전에 복사가 일어남(복사생성자 호출)
	깊은복사(객체를 참조하는 방식) / 얕은 복사 (객체를 독립적으로 완전 복사 - 새로운 메모리 공간)
	
	복사 생성자가 객체의 동적 메모리를 복사할 때 -> 새로운 메모리 할당 필요
	new 연산자 / 메모리 할당 작업 여러 번 발생 가능성 있음 -> 성능 저하(주범)

	메모리 할당 = 성능 저하 심각해짐
	불필요한 복사는 굳이 안해도 되지 않을까? : 개선하는 방법 (참조 전달 - const T&, 이동생성자 , 복사생성자 최적화)

v.emplace_back(10);	생성자만 호출 - 벡터 끝에 요소를 추가하는 작업 / 복사 생성자를 호출하지 않음


메모리를 8크기만큼 할당한다(1.5배안됨)
v.reserve(8)