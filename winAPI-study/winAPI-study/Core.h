#pragma once
#include "framework.h"
// Core (코어)?
// : 주요한 기능을 제공하고 전반적인 프로그램 구조 정의

// Singleton (싱글톤)
// : [클래스의 인스턴스가 단 하나만] 생성되도록 보장하는 소프트웨어 패턴

// 관리자(여러명) -- 총괄하는 사람(한명) ! - 이름으로 존재
// 프로그래밍하다보면 햇갈릴 수 있어 없어
// 있지 -> 코어 클래스가 총괄하는 애 - (단 한명만 존재하도록 하는 얘가 싱글톤)

// class -> 변수, 함수, 생성자, 소멸자 ...... 6 special function 공부해오기 --

// 클래스를 생성을 하나로 제한

// 생성자 : 클래스 객체가 생성될 떄 호출되는 함수 -> 초기화 설정 작업을 보통 함
// 디폴트 생성자, 매개변수 생성자, 복사 생성자
// 
// 소멸자 : 객체가 메모리에서 해제될 때 호출되는 함수, 객체의 생명 주기가 끝나서 사라지기 전에 마무리 작업 진행

// class 붕어빵 틀 -> 여러 개 찍어낼 수 있어 => X. 하나만 찍어냅시다.
// 정보 은닉

// 게임 유저 -> 게임프로그램
// 프로그래머 -> 게임 만들때(협업)도 hp, level ... 속성들에 대해서 쉽게 접근이 가능해도 될까?
// class (객체) private, public

// private : 외부에서 접근하지마 (비공개 맴버, 클래스 내에서만 접근이 가능하다)
// public : 공개 맴버. 클래스 외부에서 편히 쓴다

// struct : 무조건 public
// class : 기본이 private 설정으로 public, protected로 변경 가능

// 객체생성을 하나로 제한하고자 함
// 1. 생성자, 소멸자 -> private으로 변경
//	  맴버 함수로만 만들고 생성될 수 있다.
// 
// 2. 생성자, 소멸자를 private으로 만들면 문제가 생긴다.
//    외부에서 객체를 못만든다. (프라이빗이라서 생성자가 접근이 안됨)
// 
//    맴버 함수와 맴버 변수에 접근이 가능한가?
//    No. 누가 함수를 호출했는지 알 수 없기에(this가 없음) 접근이 불가
//    맴버 없이 호출해야 돼 -> 정적 함수(static)
// 
// 3. 정적변수(static) - 클래스 자체에 속한 함수 (객체 상태에 의존하지 X) - DATA | 정적변수에 저장된 애들은 함수가 끝나고 그 값이 저장되어 있다.
//    1) 객체 없이 호출 가능함
//    2) 정적 맴버 함수는 내부 정적 맴버로만 접근이 가능하다.
//    정적맴버는 무조건 클래스 외부에서 초기화 해줘야 한다.
//

// 주기
// 1. 프로그램 시작되서 생성되서 프로그램이 끝났을 때 없어지는 애들 - DATA (런타임)
// 2. 중괄호에서 시작되서 중괄호 내에서 끝날 때 벗어지는 애들 - STACK (컴파일)
// 3. HEAP

class Core{
	SINGLE(Core);
private:
	HWND		handle;			//	클래스 내부에 창 핸들 변수
	POINT		ptResolution;	//	해상도를 받을 변수
	HDC			hDC;			//	그리기 위한 변수
	
	HBITMAP		hBit;
	HDC			mDC;

private:
	void		Update();
	void		Render();
	
public:
	int			Init(HWND handle, POINT _ptReslution);
	void		Progress();

	HWND		getMainHandle() { return handle; }
	POINT		getResolution() { return ptResolution; }
};
	// Manager -> 프로그램 중간에 굳이 지울 필요가 없는 애들이 주요 애들이 됨.
	// 자주 사용하기 떄문에 매크로 지정을 할 것 (편리성)
	// pch.h : 미리 만들고 다시 살펴볼 이유가 없는것들을 모은 헤더파일